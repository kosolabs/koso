name: Koso CI
on:
  pull_request:
  workflow_dispatch:
  workflow_call:
    outputs:
      image_digest:
        description: "Digest of the image."
        value: ${{ jobs.build-and-push-image.outputs.digest }}
concurrency:
  group: ci-workflow-${{ github.workflow }}-ref-${{ github.ref }}
  # Cancel in-progress workflows for PRs (but not main).
  cancel-in-progress: ${{ github.ref != 'refs/heads/main'}}
jobs:
  cargo:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/postgres

    services:
      postgres:
        image: postgres:17.4@sha256:7f29c02ba9eeff4de9a9f414d803faa0e6fe5e8d15ebe217e3e418c82e652b35
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@56f84321dbccf38fb67ce29ab63e4754056677e0 # master
        with:
          toolchain: stable
      - name: Rust build cache
        uses: Swatinem/rust-cache@9d47c6ad4b02e050fd481d890b2ea34778fd09d6 # v2.7.8
        with:
          workspaces: "./ -> target"
          shared-key: "backend-build"
      - name: Run cargo test
        run: |
          mkdir -p ~/.secrets/github
          echo "::add-mask::${{ secrets.GH_APP_KEY }}"
          echo "${{ secrets.GH_APP_KEY }}" > ~/.secrets/github/key.pem
          echo "::add-mask::${{ secrets.GH_WEBHOOK_SECRET }}"
          echo -n "${{ secrets.GH_WEBHOOK_SECRET }}" > ~/.secrets/github/webhook_secret
          echo "::add-mask::${{ secrets.GH_CLIENT_SECRET }}"
          echo "${{ secrets.GH_CLIENT_SECRET }}" > ~/.secrets/github/client_secret
          KOSO_SETTING_SECRETS_DIR=$(realpath ~/.secrets) \
            KOSO_SETTING_DATABASE_URL=${{ env.DATABASE_URL }} \
            cargo test --package koso
      - run: cargo clippy -- -D warnings
      - run: cargo fmt --all -- --check

  npm:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          package_json_file: frontend/package.json
      - name: Setup Node
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version-file: frontend/.nvmrc
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml
      - run: pnpm install
      - run: pnpm run "/^(build|check|lint|test:unit)$/"

  playwright:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
      # Container registry domain
      REGISTRY: ghcr.io
    services:
      postgres:
        image: postgres:17.4@sha256:7f29c02ba9eeff4de9a9f414d803faa0e6fe5e8d15ebe217e3e418c82e652b35
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Cache Playwright install
        id: playwright-cache
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/frontend/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-playwright-
      - name: Setup pnpm
        uses: pnpm/action-setup@a7487c7e89a18df4991f7f222e4898a00d66ddda # v4.1.0
        with:
          package_json_file: frontend/package.json
      - name: Setup Node
        uses: actions/setup-node@cdca7365b2dadb8aad0a33bc7601856ffabcc48e # v4.3.0
        with:
          node-version-file: frontend/.nvmrc
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml
      - run: pnpm install
      - run: pnpm exec playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'

      # Find PR number
      - name: Find docker image cache
        id: get-docker-image-cache-name
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          result-encoding: string
          script: |
            if (context.eventName == 'pull_request') {
              return 'pr-' + context.issue.number;
            }
            if (context.ref == 'refs/heads/main') {
              const prNum = (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              )?.data[0]?.number;
              return prNum ? 'pr-' + prNum : 'main';
            }
            return 'main'

      # Build a backend docker image that will be ran by playwright.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      # Log in to the Container registry registry using the account and password
      # that will publish the cache.
      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Backend Docker Image
        id: build-backend
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        env:
          DOCKER_BUILD_SUMMARY: ${{ github.ref == 'refs/heads/main'}}
          DOCKER_BUILD_RECORD_UPLOAD: ${{ github.ref == 'refs/heads/main'}}
        with:
          context: .
          load: true
          cache-from: |
            type=registry,ref=ghcr.io/kosolabs/koso/buildcache:${{ steps.get-docker-image-cache-name.outputs.result }}
            type=registry,ref=ghcr.io/kosolabs/koso/buildcache:main

      - name: Set up test database
        working-directory: ./backend
        run: |
          KOSO_IMAGE=${{ steps.build-backend.outputs.imageid }} ../backend/scripts/init_db.sh

      # Run the playwright tests. They'll start a backend leveraging the DB setup above.
      - name: Run Playwright tests
        run: |
          mkdir -p ~/.secrets/github
          echo "::add-mask::${{ secrets.GH_APP_KEY }}"
          echo "${{ secrets.GH_APP_KEY }}" > ~/.secrets/github/key.pem
          echo "::add-mask::${{ secrets.GH_WEBHOOK_SECRET }}"
          echo -n "${{ secrets.GH_WEBHOOK_SECRET }}" > ~/.secrets/github/webhook_secret
          echo "::add-mask::${{ secrets.GH_CLIENT_SECRET }}"
          echo "${{ secrets.GH_CLIENT_SECRET }}" > ~/.secrets/github/client_secret
          CI=true \
            KOSO_IMAGE=${{ steps.build-backend.outputs.imageid }} \
            KOSO_SETTING_DATABASE_URL=${{ env.DATABASE_URL }} \
            KOSO_SETTING_SECRETS_DIR=$(realpath ~/.secrets) \
            pnpm exec playwright test --workers=4

  build-and-push-image:
    env:
      # Container registry domain
      REGISTRY: ghcr.io
      # name for the Docker image that this workflow builds
      # "kosolabs/koso" or, for PRs, "kosolabs/koso/dev"
      IMAGE_NAME: ${{ (github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && 'kosolabs/koso') || 'kosolabs/koso/dev'}}
    runs-on: ubuntu-latest
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      digest: ${{ steps.push.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@b5ca514318bd6ebac0fb2aedd5d36ec1b5c232a2 # v3.10.0
      # Log in to the Container registry registry using the account and password
      # that will publish the packages.
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract tags and labels that will be applied to the specified image.
      - name: Extract metadata (tags, labels) for Docker
        # allows the output of this step to be referenced in a subsequent step.
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          # Base name for the tags and labels.
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # Find PR number
      - name: Find docker image cache
        id: get-docker-image-cache-name
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          result-encoding: string
          script: |
            if (context.eventName == 'pull_request') {
              return 'pr-' + context.issue.number;
            }
            if (context.ref == 'refs/heads/main') {
              const prNum = (
                await github.rest.repos.listPullRequestsAssociatedWithCommit({
                  commit_sha: context.sha,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                })
              )?.data[0]?.number;
              return prNum ? 'pr-' + prNum : 'main';
            }
            return 'main'

      # Build the image, based on our `Dockerfile`.
      # If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path.
      # For more information, see "[Usage](https://github.com/docker/build-push-action#usage)"
      # in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@471d1dc4e07e5cdedd4c2171150001c434f0b7a4 # v6.15.0
        env:
          DOCKER_BUILD_SUMMARY: ${{ github.ref == 'refs/heads/main'}}
          DOCKER_BUILD_RECORD_UPLOAD: ${{ github.ref == 'refs/heads/main'}}
        with:
          context: .
          push: true
          cache-from: |
            type=registry,ref=ghcr.io/kosolabs/koso/buildcache:${{ steps.get-docker-image-cache-name.outputs.result }}
            type=registry,ref=ghcr.io/kosolabs/koso/buildcache:main
          cache-to: type=registry,ref=ghcr.io/kosolabs/koso/buildcache:${{ ((github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && 'main') || format('pr-{0}', github.event.number)) }},mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built.
      # It increases supply chain security for people who consume the image.
      # For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@c074443f1aee8d4aeeae555aebba3282517141b2 # v2.2.3
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

      - name: Cleanup old images
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with:
          package-name: "koso"
          package-type: "container"
          min-versions-to-keep: 150
          delete-only-untagged-versions: "true"
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      - name: Cleanup old dev images
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with:
          package-name: "koso/dev"
          package-type: "container"
          min-versions-to-keep: 200
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      - name: Cleanup old buildcache images
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with:
          package-name: "koso/buildcache"
          package-type: "container"
          min-versions-to-keep: 200
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
