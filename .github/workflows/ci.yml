name: Koso CI
on:
  pull_request:
  workflow_dispatch:
  workflow_call:
    outputs:
      image_digest:
        description: "Digest of the image."
        value: ${{ jobs.build-and-push-image.outputs.digest }}
concurrency:
  group: ci-workflow-${{ github.workflow }}-ref-${{ github.ref }}
  # Cancel in-progress workflows for PRs (but not main).
  cancel-in-progress: ${{ github.ref != 'refs/heads/main'}}
permissions:
  contents: read
  packages: read
jobs:
  cargo:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./backend
    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/postgres

    services:
      postgres:
        image: postgres:18.0@sha256:073e7c8b84e2197f94c8083634640ab37105effe1bc853ca4d5fbece3219b0e8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Configure rust version
        id: rust-version
        run: |
          VERSION=$(cat ../rust-toolchain.toml| sed -rn 's/^channel = "([0-9]+\.[0-9]+\.[0-9]+)"/\1/p')
          if [ -z "${VERSION}" ]; then
            echo "Version not found in rust-toolchain.toml"
            exit 1
          fi
          echo VERSION=$VERSION >> "$GITHUB_OUTPUT"
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@6d653acede28d24f02e3cd41383119e8b1b35921 # master
        with:
          toolchain: ${{ steps.rust-version.outputs.VERSION }}
          components: rustfmt,clippy
      - name: Rust build cache
        uses: Swatinem/rust-cache@f13886b937689c021905a6b90929199931d60db1 # v2.8.1
        with:
          workspaces: "./ -> target"
          shared-key: "backend-build"
      - name: Setup Stripe CLI
        run: |
          STRIPE_CLI_VERSION="1.31.0"
          curl -L https://github.com/stripe/stripe-cli/releases/download/v${STRIPE_CLI_VERSION}/stripe_${STRIPE_CLI_VERSION}_linux_x86_64.tar.gz --output stripe.tar.gz
          tar -xvf stripe.tar.gz
          mv stripe /usr/local/bin
          stripe -v

      - name: Setup secrets
        run: |
          echo "::group::Add Secrets"
          mkdir -p ~/.secrets/koso
          echo "::add-mask::${{ secrets.KOSO_HMAC }}"
          echo "${{ secrets.KOSO_HMAC }}" > ~/.secrets/koso/hmac
          mkdir -p ~/.secrets/github
          echo "::add-mask::${{ secrets.GH_APP_KEY }}"
          echo "${{ secrets.GH_APP_KEY }}" > ~/.secrets/github/key.pem
          echo "::add-mask::${{ secrets.GH_WEBHOOK_SECRET }}"
          echo -n "${{ secrets.GH_WEBHOOK_SECRET }}" > ~/.secrets/github/webhook_secret
          echo "::add-mask::${{ secrets.GH_CLIENT_SECRET }}"
          echo "${{ secrets.GH_CLIENT_SECRET }}" > ~/.secrets/github/client_secret
          mkdir -p ~/.secrets/stripe
          echo "::add-mask::${{ secrets.STRIPE_SECRET_KEY }}"
          echo "${{ secrets.STRIPE_SECRET_KEY }}" > ~/.secrets/stripe/secret_key
          STRIPE_WEBHOOK_SECRET=$(stripe listen --api-key ${{ secrets.STRIPE_SECRET_KEY }} --print-secret)
          echo "::add-mask::$STRIPE_WEBHOOK_SECRET"
          echo -n "$STRIPE_WEBHOOK_SECRET" > ~/.secrets/stripe/webhook_secret
          echo "::endgroup::"

      - name: Run cargo test
        run: |
          KOSO_SETTING_SECRETS_DIR=$(realpath ~/.secrets) \
            KOSO_SETTING_DATABASE_URL=${{ env.DATABASE_URL }} \
            cargo test --package koso
      - name: Run cargo clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
      - name: Run cargo fmt check
        run: cargo fmt --all -- --check

  npm:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          package_json_file: frontend/package.json
      - name: Setup Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: frontend/.nvmrc
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml
      - run: pnpm install
      - run: pnpm run "/^(build|check|lint|test:unit)$/"

  playwright:
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ./frontend
    env:
      DATABASE_URL: postgres://postgres:password@localhost:5432/postgres
      # Container registry domain
      REGISTRY: ghcr.io
    services:
      postgres:
        image: postgres:18.0@sha256:073e7c8b84e2197f94c8083634640ab37105effe1bc853ca4d5fbece3219b0e8
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Cache Playwright install
        id: playwright-cache
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ hashFiles('**/frontend/pnpm-lock.yaml') }}
          restore-keys: ${{ runner.os }}-playwright-
      - name: Setup pnpm
        uses: pnpm/action-setup@41ff72655975bd51cab0327fa583b6e92b6d3061 # v4.2.0
        with:
          package_json_file: frontend/package.json
      - name: Setup Node
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
        with:
          node-version-file: frontend/.nvmrc
          cache: "pnpm"
          cache-dependency-path: frontend/pnpm-lock.yaml
      - run: pnpm install
      - name: Setup playwright
        run: pnpm exec playwright install --with-deps
        if: steps.playwright-cache.outputs.cache-hit != 'true'
      - name: Setup Stripe CLI
        run: |
          STRIPE_CLI_VERSION="1.31.0"
          curl -L https://github.com/stripe/stripe-cli/releases/download/v${STRIPE_CLI_VERSION}/stripe_${STRIPE_CLI_VERSION}_linux_x86_64.tar.gz --output stripe.tar.gz
          tar -xvf stripe.tar.gz
          mv stripe /usr/local/bin
          stripe -v

      # Find PR number
      - name: Find docker image cache
        id: get-docker-image-cache-name
        uses: ./.github/actions/find-docker-image-cache

      # Build a backend docker image that will be ran by playwright.
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      # Log in to the Container registry registry using the account and password
      # that will publish the cache.
      - name: Log in to the Container registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build Backend Docker Image
        id: build-backend
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        env:
          DOCKER_BUILD_SUMMARY: ${{ github.ref == 'refs/heads/main'}}
          DOCKER_BUILD_RECORD_UPLOAD: ${{ github.ref == 'refs/heads/main'}}
        with:
          context: .
          load: true
          cache-from: |
            type=registry,ref=ghcr.io/kosolabs/koso/buildcache:${{ steps.get-docker-image-cache-name.outputs.result }}
            type=registry,ref=ghcr.io/kosolabs/koso/buildcache:main

      - name: Set up test database
        working-directory: ./backend
        run: |
          KOSO_IMAGE=${{ steps.build-backend.outputs.imageid }} ../backend/scripts/init_db.sh

      - name: Setup secrets
        run: |
          echo "::group::Add Secrets"
          mkdir -p ~/.secrets/koso
          echo "::add-mask::${{ secrets.KOSO_HMAC }}"
          echo "${{ secrets.KOSO_HMAC }}" > ~/.secrets/koso/hmac
          mkdir -p ~/.secrets/github
          echo "::add-mask::${{ secrets.GH_APP_KEY }}"
          echo "${{ secrets.GH_APP_KEY }}" > ~/.secrets/github/key.pem
          echo "::add-mask::${{ secrets.GH_WEBHOOK_SECRET }}"
          echo -n "${{ secrets.GH_WEBHOOK_SECRET }}" > ~/.secrets/github/webhook_secret
          echo "::add-mask::${{ secrets.GH_CLIENT_SECRET }}"
          echo "${{ secrets.GH_CLIENT_SECRET }}" > ~/.secrets/github/client_secret
          mkdir -p ~/.secrets/stripe
          echo "::add-mask::${{ secrets.STRIPE_SECRET_KEY }}"
          echo "${{ secrets.STRIPE_SECRET_KEY }}" > ~/.secrets/stripe/secret_key
          STRIPE_WEBHOOK_SECRET=$(stripe listen --api-key ${{ secrets.STRIPE_SECRET_KEY }} --print-secret)
          echo "::add-mask::$STRIPE_WEBHOOK_SECRET"
          echo -n "$STRIPE_WEBHOOK_SECRET" > ~/.secrets/stripe/webhook_secret
          echo "::endgroup::"

      # Start a listener that will forward events to the local server for subscription testing.
      # This will continue to run in the background after this step completes.
      - name: Start Stripe webhook listener
        working-directory: ./backend
        run: |
          SECRET_KEY="${{ secrets.STRIPE_SECRET_KEY }}" ../backend/scripts/stripe_listen.sh &

      # Run the playwright tests. They'll start a backend leveraging the DB setup above.
      - name: Run Playwright tests
        run: |
          CI=true \
            KOSO_IMAGE=${{ steps.build-backend.outputs.imageid }} \
            KOSO_SETTING_DATABASE_URL=${{ env.DATABASE_URL }} \
            KOSO_SETTING_SECRETS_DIR=$(realpath ~/.secrets) \
            pnpm exec playwright test --workers=4

  build-and-push-image:
    env:
      # Container registry domain
      REGISTRY: ghcr.io
      # name for the Docker image that this workflow builds
      # "kosolabs/koso" or, for PRs, "kosolabs/koso/dev"
      IMAGE_NAME: ${{ (github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && 'kosolabs/koso') || 'kosolabs/koso/dev'}}
    runs-on: ubuntu-24.04
    # Sets the permissions granted to the `GITHUB_TOKEN` for the actions in this job.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    outputs:
      digest: ${{ steps.push.outputs.digest }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1
      # Log in to the Container registry registry using the account and password
      # that will publish the packages.
      # Once published, the packages are scoped to the account defined here.
      - name: Log in to the Container registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3.6.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract tags and labels that will be applied to the specified image.
      - name: Extract metadata (tags, labels) for Docker
        # allows the output of this step to be referenced in a subsequent step.
        id: meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          # Base name for the tags and labels.
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      # Find PR number
      - name: Find docker image cache
        id: get-docker-image-cache-name
        uses: ./.github/actions/find-docker-image-cache

      # Build the image, based on our `Dockerfile`.
      # If the build succeeds, it pushes the image to GitHub Packages.
      # It uses the `context` parameter to define the build's context as the set of files located in the specified path.
      # For more information, see "[Usage](https://github.com/docker/build-push-action#usage)"
      # in the README of the `docker/build-push-action` repository.
      # It uses the `tags` and `labels` parameters to tag and label the image with the output from the "meta" step.
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        env:
          DOCKER_BUILD_SUMMARY: ${{ github.ref == 'refs/heads/main'}}
          DOCKER_BUILD_RECORD_UPLOAD: ${{ github.ref == 'refs/heads/main'}}
        with:
          context: .
          push: true
          cache-from: |
            type=registry,ref=ghcr.io/kosolabs/koso/buildcache:${{ steps.get-docker-image-cache-name.outputs.result }}
            type=registry,ref=ghcr.io/kosolabs/koso/buildcache:main
          cache-to: type=registry,ref=ghcr.io/kosolabs/koso/buildcache:${{ ((github.ref == 'refs/heads/main' && github.event_name != 'pull_request' && 'main') || format('pr-{0}', github.event.number)) }},mode=max
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # This step generates an artifact attestation for the image, which is an unforgeable statement about where and how it was built.
      # It increases supply chain security for people who consume the image.
      # For more information, see "[AUTOTITLE](/actions/security-guides/using-artifact-attestations-to-establish-provenance-for-builds)."
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@977bb373ede98d70efdf65b84cb5f73e068dcc2a # v3.0.0
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'

      - name: Cleanup old images
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with:
          package-name: "koso"
          package-type: "container"
          min-versions-to-keep: 150
          delete-only-untagged-versions: "true"
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      - name: Cleanup old dev images
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with:
          package-name: "koso/dev"
          package-type: "container"
          min-versions-to-keep: 200
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
      - name: Cleanup old buildcache images
        uses: actions/delete-package-versions@e5bc658cc4c965c472efe991f8beea3981499c55 # v5.0.0
        with:
          package-name: "koso/buildcache"
          package-type: "container"
          min-versions-to-keep: 200
        if: github.ref == 'refs/heads/main' && github.event_name != 'pull_request'
