name: Deploy
on:
  push:
    branches:
      - main
  workflow_dispatch:
concurrency:
  group: workflow-${{ github.workflow }}
  cancel-in-progress: false
jobs:
  build:
    uses: ./.github/workflows/ci.yml
    # Mirror the permissions set on build-and-push-image
    # as nested jobs inherit the permissions of the caller.
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: koso
      url: https://koso.app
    env:
      KOSO_IMAGE_DIGEST: ${{ needs.build.outputs.image_digest }}
    steps:
      - uses: actions/checkout@v4
      - uses: appleboy/ssh-action@v1.1.0
        with:
          host: koso.app
          username: root
          key: ${{ secrets.KOSO_KEY }}
          envs: GITHUB_SHA,KOSO_IMAGE_DIGEST
          script_stop: true
          script: |
            set -e
            echo "Deploying commit ${GITHUB_SHA}, image digest ${KOSO_IMAGE_DIGEST}"

            if [ -z "${KOSO_IMAGE_DIGEST}" ]; then
                echo "KOSO_IMAGE_DIGEST variable must be set."
                exit 1
            fi
            if [ -z "${GITHUB_SHA}" ]; then
                echo "GITHUB_SHA variable must be set."
                exit 1
            fi

            cd /root

            # Cleanup old images and containers
            echo "Cleaning up stale images and containers..."
            docker image prune -a --force --filter "until=32h"
            docker container prune --force --filter "until=32h"
            echo "Cleaned up stale images and containers."

            echo "Deploying image ghcr.io/kosolabs/koso@$KOSO_IMAGE_DIGEST"

            # Pull the new image
            docker pull ghcr.io/kosolabs/koso@$KOSO_IMAGE_DIGEST

            # Run DB migrations.
            echo "Running database migrations..."
            docker run \
                --env DATABASE_URL=postgresql://koso:koso@localhost/koso \
                --network=host \
                --rm \
                ghcr.io/kosolabs/koso@$KOSO_IMAGE_DIGEST \
                "./sqlx" migrate run
            echo "Finished database migrations."

            # Copy over the latest systemctl unit file.
            wget -O koso.service https://raw.githubusercontent.com/kosolabs/koso/$GITHUB_SHA/backend/koso.service
            mv koso.service /etc/systemd/system/koso.service

            # Set the image label in the systemctl override file.
            mkdir -p /etc/systemd/system/koso.service.d/
            cat >/etc/systemd/system/koso.service.d/override.conf <<EOL
            [Service]
            Environment="KOSO_IMAGE_DIGEST=$KOSO_IMAGE_DIGEST"
            EOL

            # Load the updated koso.service file and restart on the new version.
            echo "Restarting service..."
            systemctl daemon-reload
            systemctl restart koso.service
            systemctl is-active koso.service && echo Koso service is running
            systemctl enable koso.service
            echo "Restarted service."

            echo "Deployment complete"
      - name: Craft the success message
        id: success-message
        run: |
          echo "MSG=$(git log --format='✅ Deployed %h by %an - %s' -n 1 HEAD)" >> $GITHUB_OUTPUT
      - name: Craft the failure message
        if: failure()
        id: failure-message
        run: |
          {
            echo 'MSG<<EOFEOFMSGOUTPUT'
            git log --format='❌ Failed to deploy %h by %an - %s' -n 1 HEAD
            echo ""
            echo "$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID"
            echo EOFEOFMSGOUTPUT
          } >> "$GITHUB_OUTPUT"
      - name: Notify telegram
        uses: appleboy/telegram-action@master
        if: always()
        with:
          to: ${{ secrets.TELEGRAM_CHAT_ID }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: | 
            ${{ steps.failure-message.outputs.MSG || steps.success-message.outputs.MSG }}
